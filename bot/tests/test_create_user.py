# Generated by CodiumAI

from bot.db_service import add_user, DEFAULT_STATE, DEFAULT_STATUS, DEFAULT_LANGUAGE

# Dependencies:
# pip install pytest-mock
import pytest


class TestAddUser:

    #  Adds a new user to the database with default values for state, status and language.
    def test_add_user_with_default_values(self, mocker):
        # Mock the MongoDB database
        user_collection_mock = mocker.patch("bot.db_service.users_collection")

        # Mock the message object
        message = mocker.Mock()
        message.from_user.username = "test_username"
        message.from_user.first_name = "test_first_name"
        message.from_user.last_name = "test_last_name"
        message.chat.id = 123456789

        # Call the add_user function
        add_user(123, message)

        # Assert that the insert_one method is called with the correct user object
        user_collection_mock.insert_one.assert_called_once_with(
            {
                "user_id": 123,
                "username": "test_username",
                "first_name": "test_first_name",
                "last_name": "test_last_name",
                "chat_id": 123456789,
                "state": DEFAULT_STATE,
                "status": DEFAULT_STATUS,
                "language": DEFAULT_LANGUAGE,
            }
        )

    #  Adds a new user to the database with all fields filled.
    def test_add_user_with_all_fields_filled(self, mocker):
        # Mock the MongoDB database
        user_collection_mock = mocker.patch("bot.db_service.users_collection")

        # Mock the message object
        message = mocker.Mock()
        message.from_user.username = "test_username"
        message.from_user.first_name = "test_first_name"
        message.from_user.last_name = "test_last_name"
        message.chat.id = 123456789

        # Call the add_user function
        add_user(123, message)

        # Assert that the insert_one method is called with the correct user object
        user_collection_mock.insert_one.assert_called_once_with(
            {
                "user_id": 123,
                "username": "test_username",
                "first_name": "test_first_name",
                "last_name": "test_last_name",
                "chat_id": 123456789,
                "state": DEFAULT_STATE,
                "status": DEFAULT_STATUS,
                "language": DEFAULT_LANGUAGE,
            }
        )

    #  Adds a new user to the database with minimum required fields filled.
    def test_add_user_with_minimum_fields_filled(self, mocker):
        # Mock the MongoDB database
        user_collection_mock = mocker.patch("bot.db_service.users_collection")

        # Mock the message object
        message = mocker.Mock()
        message.from_user.username = None
        message.from_user.first_name = None
        message.from_user.last_name = None
        message.chat.id = 123456789

        # Call the add_user function
        add_user(123, message)

        # Assert that the insert_one method is called with the correct user object
        user_collection_mock.insert_one.assert_called_once_with(
            {
                "user_id": 123,
                "username": None,
                "first_name": None,
                "last_name": None,
                "chat_id": 123456789,
                "state": DEFAULT_STATE,
                "status": DEFAULT_STATUS,
                "language": DEFAULT_LANGUAGE,
            }
        )

    #  Adds a new user to the database with only user_id and chat_id fields filled.
    def test_add_user_with_only_user_id_and_chat_id_fields_filled(self, mocker):
        # Mock the MongoDB database
        user_collection_mock = mocker.patch("bot.db_service.users_collection")

        # Mock the message object
        message = mocker.Mock()
        message.from_user.username = None
        message.from_user.first_name = None
        message.from_user.last_name = None
        message.chat.id = 123456789

        # Call the add_user function
        add_user(123, message)

        # Assert that the insert_one method is called with the correct user object
        user_collection_mock.insert_one.assert_called_once_with(
            {
                "user_id": 123,
                "username": None,
                "first_name": None,
                "last_name": None,
                "chat_id": 123456789,
                "state": DEFAULT_STATE,
                "status": DEFAULT_STATUS,
                "language": DEFAULT_LANGUAGE,
            }
        )
